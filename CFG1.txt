PROG	DEC
PROG	DEC	PROG
DEC	TYPE	IDFR	(	VARDEC	)	BLOCK
VARDEC	@
VARDEC	VARDECNE
VARDECNE	TYPE	IDFR
VARDECNE	VARDECNE	,	TYPE	IDFR
BLOCK	{	ENE	}
ENE	EXP
ENE	EXP	;	ENE
ENE	@
EXP	IDFR
EXP	INTLIT
EXP	IDFR	:=	EXP
EXP	(	EXP	BINOP	EXP	)
EXP	IDFR	(	ARGS	)
EXP	BLOCK
EXP	if	EXP	then	BLOCK	else	BLOCK
EXP	while	EXP	do	BLOCK
EXP	repeat	BLOCK	until	EXP
EXP	skip
ARGS	@
ARGS	ARGSNE
ARGSNE	EXP
ARGSNE	ARGSNE	,	EXP
TYPE	int
TYPE	bool
TYPE	float
IDFR	SMALL	REP
INTLIT	+	DIGIT	REPD
INTLIT	-	DIGIT	REPD
INTLIT	DIGIT	REPD
FLOATLIT	INTLIT	.	REPD
REP	SMALL	REP
REP	DIGIT	REP
REP	_	REP
REP	@
REPD	DIGIT REPD
REPD	@
SMALL	a
SMALL	b
SMALL	c
SMALL	d
SMALL	e
SMALL	f
SMALL	g
SMALL	h
SMALL	i
SMALL	j
SMALL	k
SMALL	l
SMALL	m
SMALL	n
SMALL	o
SMALL	p
SMALL	q
SMALL	r
SMALL	s
SMALL	t
SMALL	u
SMALL	v
SMALL	w
SMALL	x
SMALL	y
SMALL	z
DIGIT	0
DIGIT	1
DIGIT	2
DIGIT	3
DIGIT	4
DIGIT	5
DIGIT	6
DIGIT	7
DIGIT	8
DIGIT	9
BINOP	==
BINOP	<
BINOP	>
BINOP	<=
BINOP	>=
BINOP	+
BINOP	*
BINOP	-
BINOP	%
BINOP	&&
BINOP	/
BINOP	||
